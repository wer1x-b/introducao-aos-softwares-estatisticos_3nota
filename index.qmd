---
title: "3º Avaliação: plotagem e aceleração computacional em Python"
author: "Wericky Barbosa de Melo"
lang: pt # Linguagem em português
format:
  html:
    toc: true
    toc-title: "Sumário"
    toc-location: left    # Pode ser 'left', 'right', ou 'body'
    grid:
      margin-width: 300px
    code-fold: true   # <--- torna o código colapsável
execute:
  echo: true
reference-location: margin
citation-location: margin
---

# introdução

Este trabalho tem como objetivo explorar importantes ferramentas do ecossistema python voltadas para visualização e aceleração computacional. Serão utilizado e contextualizados os seguintes pacotes: (para visualizar os códigos, basta clicar no botão `|> código`)

-   matplotlib: plotagem dos gráficos para melhor visualização acerca dos dados;
-   numba: otimização de códigos para aceleração computacional da compilação e rodagem de códigos.

# Parte 1: plotagem em python

Plotagem em python é do criar uma representação visual dos dados, como por exemplo gráficos e tabelas, para isto podemos utilizar alguns pacotes como por exemplo `Matplotlib`, `Seaborn`, `Plotly` e `Plotnine`.

## matplotlib

::: {style="text-align: center;"}
<img src="imagens\matplot_title_logo.png" alt="Exemplo de gráfico" width="400"/>
:::

Esta é uma biblioteca de baixo nível, altamente flexível e configurável, que serve de base para outras bibliotecas como o `Seaborn` por exemplo.

::: column-margin
Referências:

[Repositório oficial no `GitHub`](https://github.com/matplotlib/matplotlib)

[Site oficial do Matplotlib](https://matplotlib.org/stable/gallery/index.html)
:::

Exemplo de plotagem de gráficos utilizando `matplotlib`

```{python}
import matplotlib.pyplot as plt
import numpy as np

N = 21
x = np.linspace(0, 10, 11)
y = [3.9, 4.4, 10.8, 10.3, 11.2, 13.1, 14.1,  9.9, 13.9, 15.1, 12.5]

# fit a linear curve and estimate its y-values and their error.
a, b = np.polyfit(x, y, deg=1)
y_est = a * x + b
y_err = x.std() * np.sqrt(1/len(x) +
                          (x - x.mean())**2 / np.sum((x - x.mean())**2))

fig, ax = plt.subplots()
ax.plot(x, y_est, '-')
ax.fill_between(x, y_est - y_err, y_est + y_err, alpha=0.2)
ax.set_title('Gráfico de linha')
ax.plot(x, y, 'o', color='tab:brown')
```

::: column-margin
[Exemplo do gráfico de linha](https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill_between_demo.html#sphx-glr-gallery-lines-bars-and-markers-fill-between-demo-py)
:::

```{python}
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

frutas = ['maça', 'blueberry', 'cereja', 'laranja']
quantidade = [40, 100, 30, 55]
bar_labels = ['vermelho', 'azul', 'rosa', 'orange']
bar_colors = ['tab:red', 'tab:blue', 'tab:pink', 'tab:orange']

ax.bar(frutas, quantidade, label=bar_labels, color=bar_colors)

ax.set_ylabel('suprimento de frutas')
ax.set_title('Gráfico de colunas')
ax.legend(title='cor de frutas')

plt.show()
```

::: column-margin
[Exemplo do gráfico de barras](https://matplotlib.org/stable/gallery/lines_bars_and_markers/bar_colors.html#sphx-glr-gallery-lines-bars-and-markers-bar-colors-py)
:::

## Seaborn
::: {style="text-align: center;"}
<img src="imagens\logo-seaborn.svg" alt="Exemplo de gráfico" width="400"/>
:::

::: column-margin
Referências:

[Repositório oficial no `GitHub`](https://github.com/mwaskom/seaborn)

[Site oficial do Seaborn](https://seaborn.pydata.org/examples/index.html)
:::

O Seaborn utiliza o matplotlib para funcionar e se propõe a trazer uma visualização mais sofisticada dos gráficos

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
sns.set_theme(style="whitegrid")

# Load the example diamonds dataset
diamonds = sns.load_dataset("diamonds")

# Draw a scatter plot while assigning point colors and sizes to different
# variables in the dataset
f, ax = plt.subplots(figsize=(6.5, 6.5))
sns.despine(f, left=True, bottom=True)
clarity_ranking = ["I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"]
sns.scatterplot(x="carat", y="price",
                hue="clarity", size="depth",
                palette="ch:r=-.2,d=.3_r",
                hue_order=clarity_ranking,
                sizes=(1, 8), linewidth=0,
                data=diamonds, ax=ax)
```

::: column-margin
[Exemplo do gráfico de dispersão](https://seaborn.pydata.org/examples/different_scatter_variables.html)
:::

```{python}
import seaborn as sns
sns.set_theme(style="ticks", palette="pastel")

# Load the example tips dataset
tips = sns.load_dataset("tips")

# Draw a nested boxplot to show bills by day and time
sns.boxplot(x="day", y="total_bill",
            hue="smoker", palette=["m", "g"],
            data=tips)
sns.despine(offset=10, trim=True)
```

::: column-margin
[Exemplo do gráfico de bloxplot](https://seaborn.pydata.org/examples/grouped_boxplot.html)
:::

## Plotly



## plotnine

::: {style="text-align: center;"}
<img src="imagens\plotnine_logo.png" alt="Exemplo de gráfico" width="200"/>
:::

Gramática de gráficos inspirada no ggplot2 do `R`

# Parte 2: aceleração computacional com Numba

::: {style="text-align: center;"}
<img src="imagens\numba.png" alt="Exemplo de gráfico" width="400"/>
:::